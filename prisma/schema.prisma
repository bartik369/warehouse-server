generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userName              String          @unique
  email                 String          @unique
  workId                String?         @unique
  firstNameEn           String
  lastNameEn            String
  isActive              Boolean
  department            String
  locationId            String          @db.Uuid
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  firstNameRu           String
  lastNameRu            String
  devicesAdded          device[]        @relation("who_add_device")
  devicesUpdated        device[]        @relation("who_update_device")
  DeviceIssue           device_issue[]  @relation("issue_device_by_user")
  deviceIssues          device_issue[]  @relation("who_device_issues")
  deviceRepairsReceived device_repair[] @relation("contractor_who_gets_device_for_repair")
  deviceRepairsSent     device_repair[] @relation("who_sent_device_for_repair")
  DeviceReturn          device_return[]
  deviceReturns         device_return[] @relation("user_who_returns_device")
  InventoryCreateBy     inventory[]     @relation("who_created_inventory")
  InventoryResponseBy   inventory[]     @relation("who_responsible_inventory")
  password              password?
  token                 token?
  Transfer              transfer[]
  location              location        @relation("user_assigned_to_location", fields: [locationId], references: [id])
  roles                 user_role[]
}

model location {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @unique(map: "location_city_key")
  slug            String            @unique
  comment         String?
  permission_role permission_role[]
  user            user[]            @relation("user_assigned_to_location")
  warehouses      warehouse[]
}

model department {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String @unique
  slug    String @unique
  comment String
}

model token {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id])
}

model password {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password  String
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id])
}

model role {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @unique
  comment         String?
  permissionRoles permission_role[]
  users           user_role[]
}

model permission {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @unique
  comment         String?
  permissionRoles permission_role[]
}

model permission_role {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  permissionId String?     @db.Uuid
  roleId       String      @db.Uuid
  locationId   String?     @db.Uuid
  warehouseId  String?     @db.Uuid
  comment      String
  createdAt    DateTime    @default(now())
  location     location?   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  permission   permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  warehouse    warehouse?  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([permissionId, roleId, locationId, warehouseId])
}

model user_role {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @db.Uuid
  roleId String @db.Uuid
  role   role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model warehouse {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @unique
  slug            String            @unique
  locationId      String?           @db.Uuid
  comment         String?
  devices         device[]
  inventories     inventory[]
  permission_role permission_role[]
  TransferFrom    transfer[]        @relation("from_warehouse")
  TransferTo      transfer[]        @relation("to_warehouse")
  location        location?         @relation(fields: [locationId], references: [id])
}

model manufacturer {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique
  slug         String         @unique
  comment      String?
  device_model device_model[] @relation("device_manufacturer")
}

model device_model {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String       @unique
  slug           String       @unique
  imagePath      String?      @unique
  typeId         String       @db.Uuid
  manufacturerId String       @db.Uuid
  device         device[]
  manufacturer   manufacturer @relation("device_manufacturer", fields: [manufacturerId], references: [id])
  type           device_type  @relation("device_type", fields: [typeId], references: [id])
}

model device_type {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique
  slug         String         @unique
  device_model device_model[] @relation("device_type")
}

model device {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  inventoryNumber   String?            @unique
  modelId           String?            @db.Uuid
  modelCode         String?
  serialNumber      String?
  weight            Float?
  screenSize        Float?
  memorySize        Float?
  inStock           Boolean
  isFunctional      Boolean
  isAssigned        Boolean
  warehouseId       String?            @db.Uuid
  description       String?
  addedById         String             @db.Uuid
  updatedById       String             @db.Uuid
  lastIssuedAt      DateTime?
  lastReturnedAt    DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  price_without_vat Decimal?           @db.Decimal(10, 2)
  price_with_vat    Decimal?           @db.Decimal(10, 2)
  residual_price    Decimal?           @db.Decimal(10, 2)
  addedBy           user               @relation("who_add_device", fields: [addedById], references: [id])
  model             device_model?      @relation(fields: [modelId], references: [id])
  updatedBy         user               @relation("who_update_device", fields: [updatedById], references: [id])
  warehouse         warehouse?         @relation(fields: [warehouseId], references: [id])
  deviceIssues      device_issue[]
  deviceRepairs     device_repair[]
  deviceReturns     device_return[]
  InventoryDevice   inventory_device[]
  transfers         transfer[]
  warranty          warranty?
}

model device_issue {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId  Int      @default(autoincrement())
  deviceId   String?  @db.Uuid
  userId     String?  @db.Uuid
  issuedById String?  @db.Uuid
  issueDate  DateTime @default(now())
  status     String   @default("in_progress")
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  device     device?  @relation(fields: [deviceId], references: [id])
  issuedBy   user?    @relation("issue_device_by_user", fields: [issuedById], references: [id])
  user       user?    @relation("who_device_issues", fields: [userId], references: [id])
  files      file[]   @relation("device_issue_files")
}

model device_return {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId    Int      @default(autoincrement())
  deviceId     String?  @db.Uuid
  userId       String?  @db.Uuid
  returnedById String?  @db.Uuid
  returnDate   DateTime @default(now())
  condition    String?
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  device       device?  @relation(fields: [deviceId], references: [id])
  returnedBy   user?    @relation(fields: [returnedById], references: [id])
  user         user?    @relation("user_who_returns_device", fields: [userId], references: [id])
  files        file[]   @relation("device_return_files")
}

model transfer {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId       Int        @default(autoincrement())
  fromId          String?    @db.Uuid
  toId            String?    @db.Uuid
  deviceId        String?    @db.Uuid
  status          String     @default("in_progress")
  transferredById String     @db.Uuid
  comment         String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  device          device?    @relation(fields: [deviceId], references: [id])
  fromWarehouse   warehouse? @relation("from_warehouse", fields: [fromId], references: [id])
  toWarehouse     warehouse? @relation("to_warehouse", fields: [toId], references: [id])
  transferredBy   user       @relation(fields: [transferredById], references: [id])
}

model inventory {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId        Int                @default(autoincrement())
  warehouseId      String?            @db.Uuid
  createdById      String?            @db.Uuid
  responsibleId    String?            @db.Uuid
  status           String             @default("in_progress")
  comment          String?
  createdAt        DateTime           @default(now())
  completedAt      DateTime?
  createdBy        user?              @relation("who_created_inventory", fields: [createdById], references: [id])
  responsible      user?              @relation("who_responsible_inventory", fields: [responsibleId], references: [id])
  warehouse        warehouse?         @relation(fields: [warehouseId], references: [id])
  inventoryDevices inventory_device[]
  files            file[]             @relation("inventory_files")
}

model inventory_device {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inventoryId String?    @db.Uuid
  deviceId    String?    @db.Uuid
  isFound     Boolean
  device      device?    @relation(fields: [deviceId], references: [id])
  inventory   inventory? @relation(fields: [inventoryId], references: [id])
}

model device_repair {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId    Int         @default(autoincrement())
  deviceId     String?     @db.Uuid
  contractorId String?     @db.Uuid
  sentById     String?     @db.Uuid
  receivedById String?     @db.Uuid
  sentDate     DateTime    @default(now())
  receivedDate DateTime?
  status       String      @default("in_progress")
  comment      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  warrantyId   String?     @db.Uuid
  contractor   contractor? @relation(fields: [contractorId], references: [id])
  device       device?     @relation(fields: [deviceId], references: [id])
  receivedBy   user?       @relation("contractor_who_gets_device_for_repair", fields: [receivedById], references: [id])
  sentBy       user?       @relation("who_sent_device_for_repair", fields: [sentById], references: [id])
  warranty     warranty?   @relation(fields: [warrantyId], references: [id])
  files        file[]      @relation("device_repair_files")
}

model contractor {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  address       String
  phoneNumber   String
  slug          String
  deviceRepairs device_repair[]
  warranties    warranty[]
}

model warranty {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deviceId          String          @unique @db.Uuid
  warrantyNumber    String
  provider          String
  contractorId      String?         @db.Uuid
  isExpired         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  endWarrantyDate   DateTime
  startWarrantyDate DateTime
  warrantyStatus    String          @default("active")
  device_repair     device_repair[]
  contractor        contractor?     @relation(fields: [contractorId], references: [id])
  device            device          @relation(fields: [deviceId], references: [id])
}

model file {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName      String
  filePath      String
  fileType      String
  size          Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deviceIssues  device_issue[]  @relation("device_issue_files")
  deviceRepairs device_repair[] @relation("device_repair_files")
  deviceReturns device_return[] @relation("device_return_files")
  inventories   inventory[]     @relation("inventory_files")
}

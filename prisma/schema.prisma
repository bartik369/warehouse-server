generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id              String @id @default(uuid()) @db.Uuid
  name            String @unique @db.VarChar(70)
  location        Location?

}

model Location {
  id              String  @id @default(uuid()) @db.Uuid
  name            String  @unique @db.VarChar(70)
  city            City    @relation(fields: [cityId], references: [id])
  cityId          String  @unique @db.Uuid
  user            User?
  device          Device?       
}

model User {
  id              String @id @default(uuid())  @db.Uuid
  workId          String @unique @db.VarChar(70)
  login           String @unique @db.VarChar(70)
  email           String @unique @db.VarChar(100)
  firstName       String @db.VarChar(70)
  lastName        String @db.VarChar(70)
  department      String @db.VarChar(70)
  locationId      String @unique @db.Uuid
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @db.Timestamp(0)
  location        Location  @relation(fields: [locationId], references: [id])
  password        Password?
  token           Token?
  userRole        User_Role?
  assignedTo      Assign_Device? @relation("device_assigned_to")
  assignedBy      Assign_Device? @relation("device_assigned_by")
  updatedBy       Assign_Device? @relation("device_updated_by")
}

model Password {
  id              String @id @default(uuid()) @db.Uuid
  password        String @db.VarChar(255)
  user            User   @relation(fields: [userId], references: [id])
  userId          String @unique @db.Uuid
}

model Token {
  id              String @id @default(uuid()) @db.Uuid
  refreshToken    String? @unique @db.VarChar(255)
  user            User @relation(fields: [userId], references: [id])
  userId          String @unique @db.Uuid
}

model Role {
  id              String @id @default(uuid()) @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  userRole        User_Role?
  permissionRole  Permission_Role?
}

model User_Role {
  id              String @id @default(uuid()) @db.Uuid
  roleId          String @unique @db.Uuid
  role            Role  @relation(fields: [roleId], references: [id])
  userId          String @unique @db.Uuid
  user            User @relation(fields: [userId], references: [id])
}

model Permission_Role {
  id              String @id @default(uuid())  @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  permissionId    String @unique @db.Uuid
  roleId         String @unique @db.Uuid
  permission      Permission @relation(fields: [permissionId], references: [id])
  role            Role @relation(fields: [roleId], references: [id])
}

model Permission {
  id              String @id @default(uuid()) @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  permissionRole  Permission_Role?
}

model Device {
  id              String @id @default(uuid()) @db.Uuid
  serialNumber    String? @unique @db.VarChar(70)
  modelCode       String? @db.VarChar(40)
  inventoryNumber String? @unique @db.VarChar(40)
  title           String @db.VarChar(100)
  type            String @db.VarChar(40)
  manufacturer    String? @db.VarChar(40)
  weight          Int? @db.Integer
  media           String? @db.VarChar(100)
  serviceable     Boolean @default(true) @db.Boolean      
  inStock         Boolean @default(true) @db.Boolean
  assignedTo      String @default("") @db.VarChar(70)
  locationId      String @unique @db.Uuid
  createdBy       String @db.Uuid
  updatedBy       String @db.Uuid
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @db.Timestamp(0)
  location        Location @relation(fields: [locationId], references: [id])
}

 model Assign_Device {
   id             String @id @default(uuid()) @db.Uuid
   devicesId      String[]  @db.Text
   userTo         User? @relation("device_assigned_to", fields: [assignedTo], references: [id])
   assignedTo     String? @unique @db.Uuid
   userBy         User? @relation("device_assigned_by",fields: [createdBy], references: [id])
   createdBy      String @unique @db.Uuid
   userByUpdate   User? @relation("device_updated_by", fields: [updatedBy], references: [id])
   updatedBy      String @unique @db.Uuid
   createdAt      DateTime @default(now()) @db.Timestamp(0)
   updatedAt      DateTime @default(now()) @db.Timestamp(0)
   completedAt    DateTime @default(now()) @db.Timestamp(0)
 }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userName              String    @unique
  email                 String    @unique
  workId                String?   @unique  // Персональный номер сотрудника(SAP, 1C и тд)
  firstName             String
  lastName              String
  department            String
  locationId            String    @db.Uuid
  createdAt             DateTime  @default(now()) 
  updatedAt             DateTime  @updatedAt 
  roles                 user_role[] // Список ролей пользователя
  token                 token?
  password              password? 
  devicesAdded          device[]  @relation("who_add_device")
  devicesUpdated        device[]  @relation("who_update_device")
  Transfer              transfer[]
  InventoryCreateBy     inventory[] @relation("who_created_inventory")
  InventoryResponsBy    inventory[] @relation("who_responsible_inventory")
  deviceIssues          device_issue[] @relation("who_device_issues")
  deviceReturns         device_return[] @relation("user_who_returns_device")
  deviceRepairsSent     device_repair[] @relation("who_sent_device_for_repair")
  deviceRepairsReceived device_repair[] @relation("contractor_who_gets_device_for_repair")
  DeviceIssue           device_issue[] @relation("issue_device_by_user")
  DeviceReturn          device_return[]
}

model token {
  id                    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token                 String     @unique
  userId                String     @unique @db.Uuid
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  user                  user?      @relation(fields: [userId], references: [id])
}

model password {
  id                    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password              String
  userId                String     @unique @db.Uuid
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  user                  user?      @relation(fields: [userId], references: [id])
}

model role {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String    @unique 
  permissionRoles       permission_role[] // Связь с промежуточной таблицей
  users                 user_role[] // Список пользователей, связанных с ролью
}

model permission {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String    @unique
  permissionRoles       permission_role[] // Связь с промежуточной таблицей
}

model permission_role {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  permissionId String      @db.Uuid // ID разрешения
  roleId       String      @db.Uuid // ID роли
  locationId   String?     @db.Uuid // ID города (NULL на все города)
  warehouseId  String?     @db.Uuid // ID склада (NULL на все склады в городе или на все склады вообще)
  createdAt    DateTime    @default(now()) // Дата создания связи
  permission   permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  location     location?   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  warehouse    warehouse?  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  @@unique([permissionId, roleId, locationId, warehouseId]) // Уникальность комбинации
}

model user_role {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String    @db.Uuid  
  roleId                String    @db.Uuid  
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade) // Связь с таблицей User
  role                  role      @relation(fields: [roleId], references: [id], onDelete: Cascade) // Связь с таблицей Role
  @@unique([userId, roleId]) // Уникальность комбинации пользователь-роль
}

model location {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  city                 String     @unique   
  warehouses           warehouse[]
  permission_role      permission_role[]
}

model warehouse {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String     
  locationId           String     @db.Uuid       
  devices              device[]   
  inventories          inventory[] 
  location             location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  TransferFrom         transfer[] @relation("from_warehouse")
  TransferTo           transfer[] @relation("to_warehouse")
  permission_role      permission_role[]
}
model manufacturer {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String     @unique
  devices             device[]
}

model device_model {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  typeId               String        @unique
  name                 String        @unique
  imagePath            String?       @unique
  type                 device_type   @relation("device_type", fields: [typeId], references: [id])
  device               device[]
}
model device_type {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String          @unique
  value               String          @unique
  device_model        device_model[]  @relation("device_type")
}


model device {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String 
  inventoryNumber      String?     @unique
  manufacturerId       String?     @db.Uuid
  modelId              String?     @db.Uuid  //ID модели устройства
  modelCode            String?
  serialNumber         String?
  media                String?
  weight               Float?
  screenSize           Float?
  memorySize           Float?
  inStock              Boolean
  isFunctional         Boolean
  isAssigned           Boolean    // Указывает, назначено ли устройство пользователю
  warehouseId          String?     @db.Uuid 
  description          String?
  addedById            String      @db.Uuid  // Кто добавил 
  updatedById          String      @db.Uuid  //Кто внес правки
  lastIssuedAt         DateTime?  // Дата последней выдачи
  lastReturnedAt       DateTime?  // Дата последнего возврата
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  addedBy              user        @relation("who_add_device", fields: [addedById], references: [id]) 
  updatedBy            user        @relation("who_update_device", fields: [updatedById], references: [id]) 
  warehouse            warehouse?  @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
  model                device_model? @relation(fields: [modelId], references: [id])
  transfers            transfer[] 
  InventoryDevice      inventory_device[]
  deviceIssues         device_issue[] 
  deviceReturns        device_return[] 
  deviceRepairs        device_repair[]
  manufacturer         manufacturer? @relation(fields: [manufacturerId], references: [id])
}

model device_issue {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId      Int        @default(autoincrement())
  deviceId       String     @db.Uuid
  userId         String     @db.Uuid
  issuedById     String     @db.Uuid
  issueDate      DateTime   @default(now())
  status         String     @default("in_progress")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  device         device     @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user           user       @relation("who_device_issues", fields: [userId], references: [id], onDelete: Cascade)
  issuedBy       user       @relation("issue_device_by_user", fields: [issuedById], references: [id], onDelete: Cascade)
  files          file[]     @relation("device_issue_files") // Список файлов, связанных с процессом выдачи
}

model device_return {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId      Int        @default(autoincrement())
  deviceId       String     @db.Uuid
  userId         String     @db.Uuid
  returnedById   String     @db.Uuid
  returnDate     DateTime   @default(now())
  condition      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  device         device     @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user           user       @relation("user_who_returns_device", fields: [userId], references: [id], onDelete: Cascade)
  returnedBy     user       @relation(fields: [returnedById], references: [id], onDelete: Cascade)
  files          file[]     @relation("device_return_files") // Список файлов, связанных с процессом возврата
}

model transfer {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId            Int         @default(autoincrement())
  fromId               String?     @db.Uuid   // Перемещение откуда 
  toId                 String?     @db.Uuid   // Перемещение куда
  deviceId             String      @db.Uuid   
  status               String      @default("in_progress")
  transferredById      String      @db.Uuid
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  fromWarehouse        warehouse?  @relation("from_warehouse", fields: [fromId], references: [id], onDelete: SetNull)
  toWarehouse          warehouse?  @relation("to_warehouse", fields: [toId], references: [id], onDelete: SetNull)
  device               device      @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  transferredBy        user        @relation(fields: [transferredById], references: [id])
}

model inventory {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId            Int         @default(autoincrement())
  warehouseId          String      @db.Uuid     
  createdById          String      @db.Uuid     
  responsibleId        String      @db.Uuid  // Ответственный за инвентаризацию  
  status               String      @default("in_progress") 
  createdAt            DateTime    @default(now()) 
  completedAt          DateTime? 
  warehouse            warehouse   @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  createdBy            user        @relation("who_created_inventory", fields: [createdById], references: [id], onDelete: Cascade)
  responsible          user        @relation("who_responsible_inventory", fields: [responsibleId], references: [id], onDelete: Cascade)
  inventoryDevices     inventory_device[] 
  files                file[]      @relation("inventory_files") // Список файлов, связанных с инвентаризацией
}

model inventory_device {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inventoryId          String      @db.Uuid    
  deviceId             String      @db.Uuid    
  isFound              Boolean    
  inventory            inventory   @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  device               device      @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model device_repair {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId            Int         @default(autoincrement())
  deviceId             String      @db.Uuid
  contractorId         String      @db.Uuid
  sentById             String      @db.Uuid
  receivedById         String?     @db.Uuid
  sentDate             DateTime    @default(now())
  receivedDate         DateTime?   // Дата возврата из ремонта
  status               String      @default("in_progress")
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  device               device      @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  sentBy               user        @relation("who_sent_device_for_repair", fields: [sentById], references: [id], onDelete: Cascade)
  receivedBy           user?       @relation("contractor_who_gets_device_for_repair", fields: [receivedById], references: [id], onDelete: SetNull)
  contractor           contractor  @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  files                file[]      @relation("device_repair_files") // Список файлов, связанных с ремонтом
}

model contractor {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String      // Название подрядчика
  contactInfo          String?     // Контактная информация
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  deviceRepairs        device_repair[]
}

model file {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName    String
  filePath    String
  fileType    String
  size        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deviceIssues device_issue[] @relation("device_issue_files")
  deviceReturns device_return[] @relation("device_return_files")
  inventories inventory[] @relation("inventory_files")
  deviceRepairs device_repair[] @relation("device_repair_files")
}
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model city {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String @unique @db.VarChar(70)
  location        location[]

}
model location {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String  @unique @db.VarChar(70)
  cityId          String  @db.Uuid
  city            city?   @relation(fields: [cityId], references: [id])
  user            user[]
  device          device[] @relation("device_location")   
  inventory       inventory[] @relation("inventory_location")
  movingFrom      moving[] @relation("moving_location_from")
  movingTo        moving[] @relation("moving_location_to")
  assignFrom      assign_device[] @relation("assign_device_from")
  returnTo        return_device[] @relation("return_device_to_location")
}
model user {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workId          String @unique @db.VarChar(70)
  login           String @unique @db.VarChar(70)
  email           String @unique @db.VarChar(100)
  firstName       String @db.VarChar(70)
  lastName        String @db.VarChar(70)
  department      String @db.VarChar(70)
  locationId      String @db.Uuid
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @db.Timestamp(0)
  location        location? @relation(fields: [locationId], references: [id])
  userPassword    password?
  userToken       token? @relation("token_for_user")
  userRole        user_role[]
  userAssign      assign_device[] @relation("device_assigned_to")
  assignAction    assign_device[] @relation("assign_action_by_user")
  updateAction    assign_device[] @relation("assign_action_update_by_user")
  inventoryBy     inventory[] @relation("inventory_by_user")
  inventoryUpdate inventory[] @relation("inventory_update_by_user")
  device          device[] @relation("assigned_to_user")
  deviceCreatedBy device[] @relation("created_by_user")
  deviceUpdatedBy device[] @relation("updated_by_user")
  userReturn      return_device[] @relation("returned_from_user")
  returnActionBy  return_device[] @relation("return_action_by_user")
  updateActionBy  return_device[] @relation("return_action_update_by_user")
  movingBy        moving[] @relation("moving_by_user")
  updateMovingBy  moving[] @relation("moving_update_by_user")
}
model password {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password        String @db.VarChar(255)
  userId          String @unique @db.Uuid
  user            user?  @relation(fields: [userId], references: [id])
}
model token {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  refreshToken    String? @unique @db.VarChar(255)
  userId          String @unique @db.Uuid
  user            user? @relation("token_for_user", fields: [userId], references: [id])
}
model role {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  userRole        user_role[]
  permissionRole  permission_role[]
}
model user_role {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId          String @db.Uuid
  userId          String @db.Uuid
  role            role  @relation(fields: [roleId], references: [id])
  user            user  @relation(fields: [userId], references: [id])
}
model permission_role {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  permissionId    String @db.Uuid
  roleId          String @db.Uuid
  permission      permission? @relation(fields: [permissionId], references: [id])
  role            role? @relation(fields: [roleId], references: [id])
}
model permission {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  permissionRole  permission_role[]
}
model device {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serialNumber    String? @unique @db.VarChar(70)
  modelCode       String? @db.VarChar(40)
  inventoryNumber String? @unique @db.VarChar(40)
  title           String @db.VarChar(100)
  type            String @db.VarChar(40)
  manufacturer    String? @db.VarChar(40)
  weight          Int? @db.Integer
  media           String? @db.VarChar(100)
  serviceable     Boolean @default(true) @db.Boolean      
  inStock         Boolean @default(true) @db.Boolean
  locationId      String @db.Uuid
  assignedTo      String @db.Uuid
  createdBy       String @db.Uuid
  updatedBy       String @db.Uuid
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @db.Timestamp(0)
  deviceFor       user? @relation("assigned_to_user", fields: [assignedTo], references: [id])
  location        location? @relation("device_location", fields: [locationId], references: [id])
  actionBy        user?  @relation("created_by_user", fields: [createdBy], references: [id])
  actionUpdate    user? @relation("updated_by_user", fields: [updatedBy], references: [id])

}
 model assign_device {
   id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   devicesId      String[]
   locationFrom   String @db.VarChar(100)
   assignedTo     String @db.Uuid
   createdBy      String @db.Uuid
   updatedBy      String @db.Uuid
   createdAt      DateTime @default(now()) @db.Timestamp(0)
   updatedAt      DateTime @default(now()) @db.Timestamp(0)
   completedAt    DateTime @default(now()) @db.Timestamp(0)
   assignFrom     location @relation("assign_device_from", fields: [locationFrom], references: [id])        
   user           user? @relation("device_assigned_to", fields: [assignedTo], references: [id])
   actionBy       user? @relation("assign_action_by_user", fields: [createdBy], references: [id])
   actionUpdate   user? @relation("assign_action_update_by_user", fields: [updatedBy], references: [id])
 }
 model return_device {
   id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   devicesId      String[]
   locationTo     String @db.VarChar(100)
   userFrom       String @db.Uuid
   createdBy      String @db.Uuid
   updatedBy      String @db.Uuid
   createdAt      DateTime @default(now()) @db.Timestamp(0)
   updatedAt      DateTime @default(now()) @db.Timestamp(0)
   completedAt    DateTime @default(now()) @db.Timestamp(0)
   returnTo       location @relation("return_device_to_location", fields: [locationTo], references: [id])
   returnFrom     user? @relation("returned_from_user", fields: [userFrom], references: [id])
   actionBy       user? @relation("return_action_by_user", fields: [createdBy], references: [id])
   actionUpdate   user? @relation("return_action_update_by_user", fields: [updatedBy], references: [id])
 }
 model inventory {
   id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   locationId     String @db.Uuid
   foundDevice    String[]
   lostDevice     String[]
   createdBy      String @db.Uuid
   updatedBy      String @db.Uuid
   createdAt      DateTime @default(now()) @db.Timestamp(0)
   updatedAt      DateTime @default(now()) @db.Timestamp(0)
   completedAt    DateTime @default(now()) @db.Timestamp(0)
   location       location? @relation("inventory_location", fields: [locationId], references: [id])
   actionBy       user? @relation("inventory_by_user", fields: [createdBy], references: [id])
   actionUpdate   user? @relation("inventory_update_by_user", fields: [updatedBy], references: [id])
 }

 model moving {
   id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   locationFrom   String @db.Uuid
   locationTo     String @db.Uuid
   createdBy      String @db.Uuid
   updatedBy      String @db.Uuid
   createdAt      DateTime @default(now()) @db.Timestamp(0)
   updatedAt      DateTime @default(now()) @db.Timestamp(0)
   completedAt    DateTime @default(now()) @db.Timestamp(0)
   from           location? @relation("moving_location_from", fields: [locationFrom], references: [id])
   to             location? @relation("moving_location_to", fields: [locationTo], references: [id])
   actionBy       user? @relation("moving_by_user", fields: [createdBy], references: [id])
   updateBy       user? @relation("moving_update_by_user", fields: [updatedBy], references: [id])
 }
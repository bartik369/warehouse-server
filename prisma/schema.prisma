generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id              String @id @default(uuid()) @db.Uuid
  name            String @unique @db.VarChar(70)
  location        Location?

}

model Location {
  id              String  @id @default(uuid()) @db.Uuid
  name            String  @unique @db.VarChar(70)
  city            City    @relation(fields: [cityId], references: [id])
  cityId          String  @unique @db.Uuid
  user            User?
}

model User {
  id              String @id @default(uuid())  @db.Uuid
  workId          String @unique @db.VarChar(70)
  login           String @unique @db.VarChar(70)
  email           String @unique @db.VarChar(100)
  firstName       String @db.VarChar(70)
  lastName        String @db.VarChar(70)
  depatment       String @db.VarChar(70)
  locationId      String @unique @db.Uuid
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @db.Timestamp(0)
  location        Location  @relation(fields: [locationId], references: [id])
  password        Password?
  token           Token?
  userRole        User_Role?
}

model Password {
  id              String @id @default(uuid()) @db.Uuid
  password        String @db.VarChar(255)
  user            User   @relation(fields: [userId], references: [id])
  userId          String @unique @db.Uuid
}

model Token {
  id              String @id @default(uuid()) @db.Uuid
  refreshToken    String? @unique @db.VarChar(255)
  user            User @relation(fields: [userId], references: [id])
  userId          String @unique @db.Uuid
}

model Role {
  id              String @id @default(uuid()) @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  userRole        User_Role?
  permissionRole  Permission_Role?
}

model User_Role {
  id              String @id @default(uuid()) @db.Uuid
  roleId          String @unique @db.Uuid
  role            Role  @relation(fields: [roleId], references: [id])
  userId          String @unique @db.Uuid
  user            User @relation(fields: [userId], references: [id])
}

model Permission_Role {
  id              String @id @default(uuid())  @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  permissionId    String @unique @db.Uuid
  role_id         String @unique @db.Uuid
  permission      Permission @relation(fields: [permissionId], references: [id])
  role            Role  @relation(fields: [role_id], references: [id])
}

model Permission {
  id              String  @id @default(uuid()) @db.Uuid
  name            String @unique @db.VarChar(70)
  description     String @db.Text
  permissionRole  Permission_Role?
}
